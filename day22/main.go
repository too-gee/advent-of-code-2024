package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

func main() {
	var fileName string

	if len(os.Args) == 2 {
		fileName = os.Args[1]
	} else {
		fileName = "input.txt"
	}

	initNums := readInput(fileName)

	fmt.Printf("The sum of the 2000th number generated by each buyer is %d\n", Part1(initNums))
	fmt.Printf("The most bananas you can get in auction is %d\n", Part2(initNums))
}

func Part1(secretNums []int) int {
	total := 0

	for _, secretNum := range secretNums {
		for range 2000 {
			secretNum = evolve(secretNum)
		}
		total += secretNum
	}

	return total
}

func Part2(secretNums []int) int {
	// Get price lists
	prices := make([][]int, len(secretNums))

	for i, num := range secretNums {
		tmp := make([]int, 2000)

		for j := range 2000 {
			num = evolve(num)
			tmp[j] = num % 10
		}

		prices[i] = tmp
	}

	// Get occurence numbers
	buys := map[string]int{}

	for i := range prices {
		hasBought := map[string]bool{}

		for j := 4; j < len(prices[i]); j++ {
			buyId := fmt.Sprintf(
				"%d,%d,%d,%d",
				prices[i][j-3]-prices[i][j-4],
				prices[i][j-2]-prices[i][j-3],
				prices[i][j-1]-prices[i][j-2],
				prices[i][j]-prices[i][j-1],
			)

			if !hasBought[buyId] {
				hasBought[buyId] = true
				buys[buyId] += prices[i][j]
			}
		}
	}

	// Get best case
	bestBuy := 0
	bestCondition := ""
	for k, v := range buys {
		if v > bestBuy {
			bestBuy = v
			bestCondition = k
		}
	}

	fmt.Println(bestCondition)

	return bestBuy
}

func readInput(filePath string) []int {
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening %s", filePath)
		return nil
	}
	defer file.Close()

	initNums := []int{}

	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		line := scanner.Text()
		lineValue, _ := strconv.Atoi(line)

		initNums = append(initNums, lineValue)
	}

	return initNums
}

func evolve(secret int) int {
	// step 1
	secret = secret ^ (secret * 64)
	secret = secret % 16777216

	// step 2
	secret = secret ^ (secret / 32)
	secret = secret % 16777216

	// step 3
	secret = secret ^ (secret * 2048)
	secret = secret % 16777216

	return secret
}
